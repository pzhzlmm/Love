<html>
<head>
<title>Export HTML</title>
    <style type="text/css">
        html { overflow-x: hidden; overflow-y: hidden; } 
        #textFolder
        {
            width: 260px;
        }
        #inputTemplateFileName
        {
            width: 260px;
        }
        body
        {
            font-family: Arial, Helvetica,Sans-serif;
            color: black;
            background-color: #fff;
            font-size: 10.5pt;
            margin: 1em;
            padding: 1em;
            line-height: 1.5;
        }
        div
        {
            font-size: 1em;
        }
        table
        {
            empty-cells: show;
            margin: 0;
            padding: 0;
        }
        font
        {
            font-size: 1em;
        }
        ul
        {
            padding: 0 0 1em 1em;
        }
        ol
        {
            padding: 0 0 1em 1.3em;
        }
        li
        {
            line-height: 1.5em;
            padding: 0 0 0 0;
        }
        p
        {
            padding: 0;
        }
        h1, h2, h3, h4, h5
        {
            padding: 0;
        }
        h1
        {
            font-size: 1.3em; /*1.3em*/
        }
        h2
        {
            font-size: 1.1em; /*1.3em*/
        }
        h3
        {
            font-size: 1em; /*1.1em;*/ ;line-height:1.4em;white-space:nowrap;padding:0;
        }
        h4, h5, table
        {
            font-size: 1em;
        }
        sup, sub
        {
            font-size: .7em;
        }
        img
        {
            border-style: none;
        }
        a
        {
            outline: none;
            color: #00c;
        }
        a:active
        {
            color: red;
        }
        a:visited
        {
            color: #551a8b;
        }
        hr
        {
            border: 0;
            background-color: #EEE;
            border-bottom: #c9d7f1 1px solid;
            height: 0px;
            width: 99.9%;
            text-align: left;
        }
        input[type='checkbox'], input[type='radio']
        {
            width: 12px;
            height: 12px;
        }
    </style>
</head>
<body>
<table style="width: 100%;">
    <tr>
        <td id="labelCurrentFolder" width="120px">
            Current Folder</td>
        <td id="labelDisplayCurrentFolder">
            &nbsp;</td>
    </tr>
    <tr>
        <td id="labelExportTo">
            Export to</td>
        <td>
            <input id="textFolder" type="text" />
            <input id="buttonBrowse" type="button" value="Browse..." onclick="return buttonBrowse_onclick()" /></td>
    </tr>
    <tr>
        <td colspan="2">
            <hr /></td>
    </tr>
    <tr>
        <td>
            &nbsp;</td>
        <td>
            <input id="inputTemplateFileName" type="text"/>
            <input id="buttonChange" type="button" value="Change..." onclick="return buttonSelectTemplate_onclick()" />
        </td>
    </tr>
    <tr>
        <td>
            &nbsp;</td>
        <td>
            <input id="buttonUseTemplate" type="checkbox" /><label for="buttonUseTemplate"><span id="labelUseTemplate">Use Template</span></label></td>
    </tr>
    <tr>
        <td>
            &nbsp;</td>
        <td>
            <input id="buttonSEOAsFileName" type="checkbox" /><label for="buttonSEOAsFileName"><span id="labelSEOAsFileName">SEO as File Name</span></label></td>
    </tr>
	<tr>
        <td>
            &nbsp;</td>
        <td>
            <input id="buttonRenderMarkdown" type="checkbox" /><label for="buttonRenderMarkdown"><span id="labelRenderMarkdown">RenderMarkdown</span></label></td>
    </tr> 
    <tr>
        <td colspan="2">
            <hr /></td>
    </tr>

    <tr>
        <td>
            &nbsp;</td>
        <td style="text-align: right">
    <p align="right">
        <input id="buttonOK" onclick="CloseDialog(1);" style="width: 70px; padding-top: 3px;"
            type="button" value="OK" />&nbsp;
        <input id="buttonCancel" onclick="CloseDialog(2);" style="width: 70px; padding-top: 3px;"
            type="button" value="Cancel" />
    </p>
</td>
    </tr>
</table>

<script type="text/javascript" src="./common.js"></script>
<script language="javascript" type="text/javascript">
    var objApp = window.external;
    var objCommon = objApp.CreateWizObject("WizKMControls.WizCommonUI");
    var objSettings = objApp.CreateWizObject("WizKMCore.WizSettings");
    objSettings.Open(objApp.SettingsFileName);
    //
    var objDatabase = objApp.Database;
    var currentDatabase = objApp.Window.CategoryCtrl.CurrentDatabase;    
    //
    var appGUID = objApp.GetPluginAppGUID(WizChromeBrowser);
    //
    objApp.PluginLocalizeHtmlDialog(WizChromeBrowser);
    //
    var settings_section = "Plugin_ExportFiles";
    //
    textFolder.value = objSettings.GetStringValue(settings_section, "Folder");
    buttonUseTemplate.checked = objSettings.GetBoolValue(settings_section, "UseTemplate");
    buttonSEOAsFileName.checked = objSettings.GetBoolValue(settings_section, "SEOAsFileName");
	buttonRenderMarkdown.checked = objSettings.GetBoolValue(settings_section, "RenderMarkdown");
    //
    inputTemplateFileName.value = objSettings.GetStringValue(settings_section, "TemplateFileName");
    //
    var selectedFolder = objApp.Window.CategoryCtrl.SelectedFolder;
    var selectedGroupFolder = objApp.Window.CategoryCtrl.SelectedGroupFolder;
	var selectedType = objApp.Window.CategoryCtrl.SelectedType;
    var isPersonalFolder = !!selectedFolder;
    var isGroupFolder = !!selectedGroupFolder;  
	var isPersonalAllFolder = (selectedType === 5);
	var isGroupUnclass = (selectedType === 19);	
    //
    function CloseDialog(ret) {
        if (ret == 1) {
            if (textFolder.value == null
                || textFolder.value.length == 0) {
                alert(objApp.LoadPluginString(appGUID, "SelectFolderToImport"));
                return;
            }
            //
            var flags = 0x08 | 0x4000 | 0x20000;       //mht
            if (buttonUseTemplate.checked) { 
                flags |= 0x01;      //template
                //
                if (inputTemplateFileName.value) {
                    flags |= 0x100; // use inputTemplateFileName.value as the template
                }
            }
            //
            //
            var objProgress = objApp.CreateWizObject("WizKMControls.WizProgressWindow");
            objProgress.Title = objApp.LoadPluginString(appGUID, "Exporting");
            objProgress.Max = 0;
            objProgress.Show();
            //
            ExportMHT(objProgress, textFolder.value, flags);
            objProgress.Hide();
            objProgress.Destroy();
            //
            objSettings.SetStringValue(settings_section, "Folder", textFolder.value);
            objSettings.SetBoolValue(settings_section, "UseTemplate", buttonUseTemplate.checked);
            objSettings.SetBoolValue(settings_section, "SEOAsFileName", buttonSEOAsFileName.checked);
            objSettings.SetStringValue(settings_section, "TemplateFileName", inputTemplateFileName.value);
			objSettings.SetBoolValue(settings_section, "RenderMarkdown", buttonRenderMarkdown.checked);
            //
            objSettings.Close();
        }
        objApp.Window.CloseHtmlDialog(WizChromeBrowser, ret);
    }
    function Init() {
        if (isGroupFolder) { 
            try {
                if (currentDatabase.UserGroup > 10) {
                    alert(objApp.LoadPluginString(appGUID, "Export documents requires superuser privileges or above!"));
                    CloseDialog(2);
                    return;
                }
            }
            catch(e) {
                CloseDialog(2);
                return;
            }
        }
        var folderName = "";
        //
        if (isPersonalFolder) {
            folderName = selectedFolder.Location;
        }
        else if (isGroupFolder) {
            folderName = selectedGroupFolder.Name;
        }
		else if(isGroupUnclass){
			folderName = objApp.LoadPluginString(appGUID, "GroupUnclassedFolder");
		}
		else if(isPersonalAllFolder){
			alert(objApp.LoadPluginString(appGUID, "DoNotSupportExportAllPersonalNotes"));
			objApp.Window.CloseHtmlDialog(WizChromeBrowser, 0);
			return;
		}
        else { 
            alert(objApp.LoadPluginString(appGUID, "NoFolderSelected"));
            objApp.Window.CloseHtmlDialog(WizChromeBrowser, 0);
            return;
        }
        //
        labelDisplayCurrentFolder.innerHTML = "<strong>" + folderName + "</strong>";
    }
    //
    Init();
    
    function buttonBrowse_onclick() {
        var exportPath = objCommon.SelectWindowsFolder(objApp.LoadPluginString(appGUID, "SelectFolder"));
        textFolder.value = exportPath;
    }
    function buttonSelectTemplate_onclick() {
        var templateFileName = objCommon.SelectTemplateDlg();
        inputTemplateFileName.value = templateFileName;
    }
    //
    function makeValidFileName(name) {
        name = name.replace(/(^\s*)|(\s*$)/g, "");
        //
        name = name.replace(/\//g, "-");
        name = name.replace(/\\/g, "-");
        name = name.replace(/\?/g, "-");
        name = name.replace(/\:/g, "-");
        name = name.replace(/\*/g, "-");
        name = name.replace(/\|/g, "-");
        name = name.replace(/\</g, "-");
        name = name.replace(/\>/g, "-");
        name = name.replace(/\r/g, "-");
        name = name.replace(/\n/g, "-");
        name = name.replace(/\t/g, "-");
        name = name.replace(/\%/g, "-");
        name = name.replace(/\'/g, "-");
        name = name.replace(/\"/g, "-");
        //
        if (name.length > 50)
            name = name.substr(0, 50);
        //
        return name;
    }
    //
    function ExportPersonalFolderMHT(objProgress, objFolder, path, flags) {
        //
        var documents = objFolder.Documents;
        objProgress.Max = documents.Count;
        for (var i = 0; i < documents.Count; i++) {
			var tmpFlag = flags;
            var objDoc = documents.Item(i);
            var name = buttonSEOAsFileName.checked ? objDoc.SEO : objDoc.Title;
            if (name == null || name.length == 0) {
                name = objDoc.Title;
            }
            //
            name = makeValidFileName(name);
            //
            name = name + ".mht";
            var filename = path + "\\" + name;
            //
            objProgress.Text = objDoc.Title;
			if(buttonRenderMarkdown.checked){
				if (objDoc.IsMarkdown() || objDoc.IsMathJax()) {
                    tmpFlag |= 0x200 | 0x400;
                }
			}
            //
            objDoc.SaveToHtml(filename, tmpFlag);
            objProgress.Pos = i + 1;
        }
        //
        var subfolders = objFolder.Folders;
        for (var i = 0; i < subfolders.Count; i++) {
            var objSubFolder = subfolders.Item(i);
            //
            var subpath = path + GetFolderSEO(objSubFolder) + "\\";
            ExportPersonalFolderMHT(objProgress, objSubFolder, subpath, flags);
        }
    }
    //
    function ExportGroupFolderMHT(objProgress, objGroupFolder, path, flags) {
        //
        var documents = objGroupFolder.Documents;
        objProgress.Max = documents.Count;
        for (var i = 0; i < documents.Count; i++) {
			var tmpFlag = flags;
            var objDoc = documents.Item(i);
            var name = buttonSEOAsFileName.checked ? objDoc.SEO : objDoc.Title;
            if (name == null || name.length == 0) {
                name = objDoc.Title;
            }
            //
            name = name.replace(/\//g, "-");
            name = name.replace(/\\/g, "-");
            //
            name = name + ".mht";
            var filename = path + "\\" + name;
            //
            objProgress.Text = objDoc.Title;
			if(buttonRenderMarkdown.checked){
				if (objDoc.IsMarkdown() || objDoc.IsMathJax()) {
                    tmpFlag |= 0x200 | 0x400;
                }
			}
            //
            objDoc.SaveToHtml(filename, tmpFlag);
            objProgress.Pos = i + 1;
        }
        //
        var subfolders = objGroupFolder.Children;
        for (var i = 0; i < subfolders.Count; i++) {
            var objSubFolder = subfolders.Item(i);
            //
            var subpath = path + GetGroupFolderSEO(objSubFolder) + "\\";
            ExportGroupFolderMHT(objProgress, objSubFolder, subpath, flags);
        }
    }
	function ExportGroupUnclassFolderMHT(objProgress, path, flags){
		var database = objApp.Window.CategoryCtrl.CurrentDatabase;
		if(!database)
		return;
		//
		var kbguid = database.KbGUID;
		var documents = database.GetUnclassedDocuments(kbguid);
		if(!documents)
		return;
		//
		objProgress.Max = documents.Count;
		for(var i = 0; i < documents.Count; i++){
			var tmpFlag = flags;
			var objDoc = documents.Item(i);
            var name = buttonSEOAsFileName.checked ? objDoc.SEO : objDoc.Title;
            if (name == null || name.length == 0) {
                name = objDoc.Title;
            }
            //
            name = makeValidFileName(name);
            //
            name = name + ".mht";
            var filename = path + "\\" + name;
            //
            objProgress.Text = objDoc.Title;
			if(buttonRenderMarkdown.checked){
				if (objDoc.IsMarkdown() || objDoc.IsMathJax()) {
                    tmpFlag |= 0x200 | 0x400;
                }
			}
            //
            objDoc.SaveToHtml(filename, tmpFlag);
            objProgress.Pos = i + 1;
		}
	}
    function ExportMHT(objProgress, path, flags) {

        if (isPersonalFolder) {
            ExportPersonalFolderMHT(objProgress, selectedFolder, path, flags);
        }
        else if (isGroupFolder) {
            ExportGroupFolderMHT(objProgress, selectedGroupFolder, path, flags);
        }
		else if (isGroupUnclass){
			ExportGroupUnclassFolderMHT(objProgress, path, flags);
		}
    }
</script>
</body>
</html>