<!doctype html><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>209</title>
    
<style id="wiz_code_style">.wiz-editor-body .wiz-code-container{position: relative; padding:8px 0; margin: 5px 0;text-indent:0; text-align:left;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10.5pt; font-size: 0.875rem}.wiz-editor-body .wiz-code-container .CodeMirror div {margin-top: 0; margin-bottom: 0;}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre {padding: 0 4px;}.CodeMirror pre.CodeMirror-line {min-height: 24px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-fat-cursor-mark {background-color: rgba(20, 255, 20, 0.5);-webkit-animation: blink 1.06s steps(1) infinite;-moz-animation: blink 1.06s steps(1) infinite;animation: blink 1.06s steps(1) infinite;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: hidden !important; margin-bottom: 0; margin-right: -30px; padding: 16px 30px 16px 0; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;pointer-events: auto !important;outline: none;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: 0; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: 100%; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; padding: 0.1px;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}.CodeMirror-sizer {min-height:auto !important;}</style><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '寰蒋闆呴粦', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #bbbbbb;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-hide {display:none !important;}</style><style name="wiz_unsave_style">html, .wiz-editor-body {    font-size: 12pt;}body, .wiz-editor-body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.7; !important;    color: inherit;    background-color: #ffffff;    margin: 0 auto;    padding: 20px 16px;    padding: 1.25rem 1rem;}img{    max-width: 100%;}</style><style name="wiz_unsave_style">body::-webkit-scrollbar {width: 16px;height: 16px;background-color: #f0f0f0;border: none;}body::-webkit-scrollbar-thumb {background-color: #dcdcdc;}body::-webkit-scrollbar-thumb:hover {background-color: #c0c0c0;}body::-webkit-scrollbar-thumb:active {background-color: #969696;}body::-webkit-scrollbar-thumb:disabled {background-color: #f9f9f9;}body::_webkit_scrollbar-track {background-color: #ffffff;}body::-webkit-scrollbar-corner {background-color: #f0f0f0;}body::-webkit-scrollbar-button {\*  display: none;*\}body.flat-scrollbar::-webkit-scrollbar,body.flat-scrollbar div::-webkit-scrollbar,body.flat-scrollbar ul::-webkit-scrollbar,body.flat-scrollbar aside::-webkit-scrollbar,body.flat-scrollbar iframe::-webkit-scrollbar {width: 12px;height: 12px;}</style><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/editorHelper.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///D:/坚果云同步/Note/Wiz/templates/WizTemplate.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/core/wizEditorForPc.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" wiz_style="unsave" charset="utf-8">document.addEventListener('DOMContentLoaded', function handler(){
	if(window.external){
		try{
			window.WizChromeBrowser.Execute("Wiz_DOMContentLoaded", null, null, null, null);
		}catch(err){
			console.err(err);
		}
	}
	document.removeEventListener('DOMContentLoaded', handler, false);
}, false);</script></head>

<body class="wiz-editor-body" spellcheck="false"><div></div><h1><span>209. </span>应用程序分层的设计及使用<span><o:p></o:p></span><span></span></h1><p class="MsoPlainText"><span style="font-family:宋体;">2.5</span><span style="font-family:宋体;">在分层结构中实现业务<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">上节课的分层<span>,</span>这几节课来进行实现<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="195" src="index_files/clip_image002b6bc5b5e-fa42-4916-8d28-942b4ba618be.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><h2>准备工作<span><o:p></o:p></span><span></span></h2><p class="MsoPlainText"><span style="font-family:宋体;">首先我们要做的一系列准备工作<span>(</span>在上节课的基础之上进行代码复用<span>):<o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">在这个结构的基础之上先导包<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="260" height="81" src="index_files/clip_image0039f154282-6a4c-4f35-b11e-488ff5b69aa1.png"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">把我们的工具类<span>copy</span>到<span>commons</span>的目录之下<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="166" height="46" src="index_files/clip_image00453e2c0d1-4f0f-452f-b61e-7bc1bd2d09de.png"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">把我们的<span>proprties</span>文件放在<span>src</span>的目录之下<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="256" height="204" src="index_files/clip_image005ffcebd1f-97a3-40e3-a3f8-65407adbd573.png"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">再把<span>departments</span>这个模型放到<span>pojo</span>包下<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="198" height="50" src="index_files/clip_image0069280af1f-f6f1-48f4-9355-232a8e7b7785.png"></span><span style="font-family:宋体;"><o:p></o:p></span></p><h2>持久层<span><o:p></o:p></span><span></span></h2><p class="MsoNormal">我们现在要完成一个队<span>department</span>的查询<span><o:p></o:p></span></p><p class="MsoNormal">我们首先做一个接口<span>,</span>注意这个接口是放在<span>dao,</span>而不是<span>dao.impl</span>目录下的<span><o:p></o:p></span></p><p class="MsoNormal">注意我们一般持久层的命名都是以<span>dao(</span>数据库访问对象<span>)</span>结尾的<span><o:p></o:p></span></p><p class="MsoNormal">然后在这个<span>department</span>的接口里定义包含哪些对部门操作的抽象行为<span><o:p></o:p></span></p><p class="MsoNormal">起名的规则<span>:</span>不要包含一些包含业务逻辑的名称<span>,</span>一定要原子化<span>,</span>这样被复用的概率才高<span>,</span>如查询<span>,</span>就叫查询好了<span>,</span>至于被哪个业务定义由那个业务去进行定义<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="154" src="index_files/clip_image008f3f87d1a-3c21-4be5-9e6e-17c5b6a2b4e7.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">持久层的代码要贴近对数据库做了怎样的操作<span><o:p></o:p></span></p><p class="MsoNormal">如<span>:</span>根据数据库名称去查找部门表<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="25" src="index_files/clip_image010bf85262c-2e5c-499e-8426-05e14c17e87f.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">添加部门<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="47" src="index_files/clip_image0122c716558-7a10-407a-9316-ef01cfc454f0.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">当前接口代码<span>:<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="212" src="index_files/clip_image014d1258593-4ff1-46c7-af8b-710435eac5f9.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><h3>接口的实现<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">接口的实现是在<span>dao</span>层下<span>impl</span>里的<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="182" height="69" src="index_files/clip_image01549d84081-8ecb-4a67-8f9b-0ce00166889a.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">接口实现的起名<span>:</span>对哪个接口进行实现<span>,</span>就在后面加个<span>impl<o:p></o:p></span></p><p class="MsoNormal">再把对应类加进来<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="462" src="index_files/clip_image017442c70df-6f49-40e0-bf80-76cd45846720.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">然后就变成了一个具体实现类<span>,</span>在这里做具体实现<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="281" src="index_files/clip_image019dfd6ce1d-89c3-441f-a882-9b7dfbe30ef6.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">先写插入<span>,</span>还是固定的套路<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="263" src="index_files/clip_image0213be44761-4512-47d6-ad7c-17c1195eda55.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">然后再写对应的插入语句<span>(</span>注意设置成手动提交<span>,</span>目的是为了培养意识<span>)<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="246" src="index_files/clip_image023f06b0102-9789-4709-a144-730b34b6e267.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">还有个查询<span>,</span>结构差不多<span>,</span>只是<span>sql</span>语句有一点点变化<span>,copy</span>过来做一点点修改就好<span><o:p></o:p></span></p><p class="MsoNormal">在这里还要新定义一个<span>ResultSet</span>和<span>ArrayList(</span>因为要把查到的结果集放到<span>List</span>当中<span>)<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="118" src="index_files/clip_image02514208d7f-0704-4dff-a2f9-a790872b49f9.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">改下<span>sql,</span>事务性语句去掉<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="236" src="index_files/clip_image0276ebee41f-bdc4-4d55-ad2c-ae264d1e1958.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">最后把<span>list</span>返回就可以了<span><o:p></o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><h3>接下来是业务层<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">业务层的接口是放<span>service</span>包下<span><o:p></o:p></span></p><h4>接口的起名<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span>1.</span>尽量体现要包含哪些业务<span><o:p></o:p></span></p><p class="MsoNormal"><span>2.</span>一般业务层都是一<span>Service</span>结尾的<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="290" src="index_files/clip_image0292644477d-e057-43c3-8113-70a0d9cefd05.jpg"></span><span><o:p></o:p></span></p><h4>方法的命名<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">业务层方法的命名贴近这次要做什么样的业务处理<span><o:p></o:p></span></p><p class="MsoNormal">如部门的添加<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="39" src="index_files/clip_image0315ba698b8-a2da-4abe-84ca-4551b941c5f8.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">接着就去<span>impl</span>包下放具体的实现类<span><o:p></o:p></span></p><h4>实现的起名<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="326" src="index_files/clip_image0334b4e39c6-ff80-4dda-b818-f051daaf3783.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">同样在后面加<span>impl<o:p></o:p></span></p><p class="MsoNormal"><span><img width="463" height="375" src="index_files/clip_image035f25faa5a-6d3d-4fa8-a6df-783070bf4eac.jpg"></span><span><o:p></o:p></span></p><h4>业务的实现<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">接下来在这里就可以调用我们的持久层了<span>(</span>我们刚刚已经定义了一个插入部门的方法<span>)<o:p></o:p></span></p><p class="MsoNormal">因为要用到这个方法因此我们要先创建它<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="152" src="index_files/clip_image03794ef14ef-f708-4b14-a935-09b80f048a2f.jpg"></span><span><o:p></o:p></span></p><h4>测试<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">建立一个测试包定义测试类进行测试<span><o:p></o:p></span></p><p class="MsoNormal">先创建一个实体对象并设置参数<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="289" src="index_files/clip_image0396b7b9369-4b0f-46ba-9729-211213ab0cbf.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">效果<span>:<o:p></o:p></span></p><p class="MsoNormal"><span><img width="306" height="270" src="index_files/clip_image041c3bf84d3-cbf5-4f37-97c1-4b0bd08652a4.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span>Dao</span>层的代码就负责操作数据<span>,</span>别的什么都不管<span>,</span>业务层就负责来执行<span>,</span>根据业务需求调用不同的持久层<span>,text</span>层就相当于界面层负责收集用户数据丢给业务层<span><o:p></o:p></span></p><p class="MsoNormal">这样的好处是<span>dao</span>的方法业务层的其他方法也能够调用<span>(</span>提高代码复用性<span>)<o:p></o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">2.5.1.1 </span><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface DepartmentsDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Departments&gt; selectDeptByName(String<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void insertDept(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public class DepartmentsDaoImpl implements DepartmentsDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Departments&gt; selectDeptByName(String deptName)<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ResultSet rs = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">List&lt;Departments&gt; list = new ArrayList&lt;&gt;();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement("select * from<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">departments where department_name = ?");<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setString(1, deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">rs = ps.executeQuery();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">while(rs.next()){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Departments d = new Departments();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setDepartmentId(rs.getInt("department_id"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setDepartmentName(rs.getString("department_name"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setLocationId(rs.getInt("location_id"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">list.add(d);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.rollback(conn);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, null);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return list;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void insertDept(Departments dept) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.setAutoCommit(false);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement("insert into departments<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">values(default,?,?)");<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setString(1, dept.getDepartmentName());<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setInt(2, dept.getLocationId());<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.execute();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.commit();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.rollback(conn);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, null);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">2.5.2</span><span style="font-family:宋体;">业务层<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">2.5.2.1 </span><span style="font-family:宋体;">代码<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface DepartmentsService {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void addDepartments(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public class DepartmensServiceImpl implements<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentsService {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void addDepartments(Departments dept) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentsDao deptDao = new DepartmentsDaoImpl();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">deptDao.insertDept(dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">2.5.3</span><span style="font-family:宋体;">测试层<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">2.5.3.1 </span><span style="font-family:宋体;">代码<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public class Test {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public static void main(String[] args) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Departments dept = new Departments();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">dept.setDepartmentName("</span><span style="font-family:宋体;">研发部<span>");<o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">dept.setLocationId(30);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentsService ds = new DepartmensServiceImpl();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ds.addDepartments(dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><h1><span>210. </span>封装通用的<span>BaseDao</span>实现通用的<span>DML</span>方法<span><o:p></o:p></span><span></span></h1><h3>什么是<span>BaseDao?<o:p></o:p></span><span></span></h3><p class="MsoNormal">一般架构师在做开发的时候会把一些共性的东西抽取出来作为一个模板<span>,baseDao</span>中就包含一个通用的对数据库进行操作的这么一个模板<span><o:p></o:p></span></p><p class="MsoNormal">我们先在对数据库其实就两个<span>,</span>一个<span>dml:insert,update,delete,</span>另外就是<span>select</span>查询操作<span>,</span>我们把这两部分抽取出来做一个通用的模板<span>,</span>以便其他的程序员使用的时候都可以复用这个模板<span>,</span>省去了要去写<span>jdbc</span>这个代码<span><o:p></o:p></span></p><p class="MsoNormal">先以封装<span>dml</span>操作为例<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="414" src="index_files/clip_image0432d5d8e21-8aed-4048-a775-ca288a402c05.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">我们现在就想把他们有共性的地方抽取出来<span>,</span>不同的地方以参数的形式传递到方法里<span>,</span>这样就做了一个通用的执行<span>dml</span>操作的方法<span><o:p></o:p></span></p><h2>实现<span><o:p></o:p></span><span></span></h2><h3>定义接口<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">首先我们在<span>dao</span>包下创建一个接口<span>,</span>来定义通用方法的标准<span>:BaseDao<o:p></o:p></span></p><h4>定义方法<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span>Int:</span>返回数据库操作的条数<span><o:p></o:p></span></p><p class="MsoNormal">现在我们定义就不要具体直线什么表什么对象了<span>,</span>因为我们是一个通用的方法<span>,<o:p></o:p></span></p><p class="MsoNormal"><span><img width="407" height="45" src="index_files/clip_image044a8a9117f-e5e7-4f92-803f-cf884cbff509.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">添加和删除也是一种更新<span><o:p></o:p></span></p><p class="MsoNormal">我们不仅要执行<span>insert,update</span>也要执行<span>,</span>所以要一个<span>sql,</span>因为参数可能一个可能多个所以用集合表示<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="30" src="index_files/clip_image0460869108d-7f7d-4cf7-abc3-58b95fa07017.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">需要一个<span>sql</span>语句<span>,</span>和一个参数列表<span><o:p></o:p></span></p><p class="MsoNormal">具体使用<span>:</span>让具体的去集成这个接口<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="142" src="index_files/clip_image048192ab85d-c018-48f9-847a-825fc974599c.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">我们现在还得编写一个<span>baseDao</span>的子类<span>,</span>谁用谁集成自它直接继承就好了<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="364" src="index_files/clip_image0508726099c-697f-4104-b8ba-ec7cc71fa049.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><p class="MsoNormal">这个参数可能是一个<span>,</span>也可能是多个<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="553" height="37" src="index_files/clip_image0523b4803cc-103d-41a7-a7c4-bf9646ef1d32.jpg"></span><span><o:p></o:p></span></p><h3>实现<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">通用的结构先搭建好<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="336" src="index_files/clip_image05449cf5e2c-1ed7-4913-b03d-6f04c5b21dad.jpg"></span><span><o:p></o:p></span></p><h4><span>PreparedStatement</span>助攻<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">通过<span>PreparedStatement</span>的方法我们可以得到参数的个数<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="49" src="index_files/clip_image056923329cb-423b-4faa-a634-a3be3e4007f3.jpg"><o:p></o:p></span></p><p class="MsoNormal"><span>换句话说参数里的所有信息都封装到了<span>ParameterMetaData</span>包下<span><o:p></o:p></span></span></p><p class="MsoNormal"><span>这个对象下有个获取数据<span>(</span>问号<span>)</span>的按方法<span><o:p></o:p></span></span></p><p class="MsoNormal"><span><img width="554" height="33" src="index_files/clip_image0584bbc0aac-3f6e-4d6a-a50e-8f0489fee810.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">而<span>PreparedStatement</span>本身除了<span>setInt,setString,</span>还有模糊性的<span>setObject</span>的方法<span>,</span>通过这个方法我们可以忽略其具体类型<span>,</span>都当做对象去绑定<span>,</span>这就帮我们在传入参数不清楚的时候可以进行传参<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="126" src="index_files/clip_image0603a2f6db7-f687-40c0-ae01-0a8091933b3f.jpg"></span><span><o:p></o:p></span></p><h4>实现<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="421" src="index_files/clip_image062a5574017-0cbd-4eac-b13d-e2ccf424968c.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">别忘了添加事务<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="417" src="index_files/clip_image06418a5ceb0-b0a5-4808-9897-8440b725818c.jpg"></span><span><o:p></o:p></span></p><h3>通用方法的使用<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">以<span>departmentdao</span>为例<span>,</span>现在有个<span>innsert,<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="94" src="index_files/clip_image06615768d16-56b6-4c30-a97d-5ad3f1c9ed13.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="282" src="index_files/clip_image068c517355a-64a7-4187-96b4-a1b1ee0e5522.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">不管它<span>,</span>做为比较<span>,</span>现在添加个<span>update<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="118" src="index_files/clip_image070994267b2-3d2c-4c3c-ad89-c1569fde359a.jpg"></span><span><o:p></o:p></span></p><h4>然后实现<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">具体实现是我们自己去传参<span>,</span>自己去写<span>JDBC,</span>现在画风变了<span><o:p></o:p></span></p><p class="MsoNormal">先把要定义的语句写好<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="273" height="32" src="index_files/clip_image0723154be51-8a16-4a69-9644-5ac9fe679999.jpg"><span>&nbsp;</span><img width="554" height="20" src="index_files/clip_image0748df4029c-67b5-44ce-9e27-858eb3196821.jpg"></span></p><p class="MsoNormal"><span>定义参数列表<span>(</span>注意参数列表的位置要和<span>?</span>的位置一一对应<span>)<o:p></o:p></span></span></p><p class="MsoNormal"><span><img width="440" height="37" src="index_files/clip_image07508659777-ee5a-4e29-a0ac-8a842debaf13.png"><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="20" src="index_files/clip_image07756ef8c4d-1e74-4f0f-9d95-1edf0b11d288.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">接下来调用父类的方法把参数传进去就好了<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="277" height="18" src="index_files/clip_image0799b978f41-b8ac-4166-bac9-7abdb63c0a32.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">完整版<span>:</span>是不是简洁很多<span>:<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="78" src="index_files/clip_image08185c20b8f-e2f9-4855-b924-7f9ffd92f89e.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><h3>业务层调用<span><o:p></o:p></span><span></span></h3><p class="MsoNormal"><span><img width="554" height="239" src="index_files/clip_image0832f47bed1-11a6-4636-8226-6426cce2bbeb.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">接口实现类中进行实现<span>,<o:p></o:p></span></p><p class="MsoNormal">为什么不能直接<span>new baseDao?</span>里面没有<span>sql</span>语句啊<span>,sql</span>语句是子类根据自己需要所定义的<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="360" src="index_files/clip_image0853f18b1d0-a917-435c-bbc0-9bd55288b73b.jpg"></span><span><o:p></o:p></span></p><h3>测试<span><o:p></o:p></span><span></span></h3><p class="MsoNormal"><span><img width="554" height="244" src="index_files/clip_image08762b9635a-6c0e-4ec1-ba10-b0abb67c4911.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">效果<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="308" height="295" src="index_files/clip_image089b3809abb-f854-4285-968c-85811b371793.jpg"></span><span><o:p></o:p></span></p><h3>实现<span>2</span>删除<span><o:p></o:p></span><span></span></h3><h4><span>Dao<o:p></o:p></span><span></span></h4><p class="MsoNormal">接下来又做了个删除操作代码如下<span>,</span>道理同样<span><o:p></o:p></span></p><p class="MsoNormal"><span>Dao<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="132" src="index_files/clip_image091c65ea45e-d311-4389-a9af-ec348d2fa44e.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="103" src="index_files/clip_image09375fe5f0c-21c9-4743-ad08-8c6ebfbdd283.jpg"></span><span><o:p></o:p></span></p><h4><span>Service<o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="238" src="index_files/clip_image09552b52287-5c42-4a0c-b9ea-10d6477bbabf.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="125" src="index_files/clip_image0978f9e700b-5ab0-4914-a86e-d8df5e275868.jpg"></span><span><o:p></o:p></span></p><h4>测试<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="265" src="index_files/clip_image099c39dae6b-7f1f-47bc-a15f-3d3ff2fb73e9.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">因此以后实现直接给参数和语句就可以了<span><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">3 </span><span style="font-family:宋体;">封装通用的<span> BaseDao<o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">3.1</span><span style="font-family:宋体;">封装更新操作<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">3.1.1</span><span style="font-family:宋体;">代码<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface BaseDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int executeUpdate(String sql,Object[] param);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public class BaseDaoImpl implements BaseDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">/**<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">* </span><span style="font-family:宋体;">封装通用的<span> DML </span>操作<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">*/<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int executeUpdate(String sql, Object[] param) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn =null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">int rows = 0;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.setAutoCommit(false);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement(sql);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">得到参数的个数<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ParameterMetaData pmd = ps.getParameterMetaData();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">绑定参数<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">for(int i=0;i&lt;pmd.getParameterCount();i++){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setObject(i+1, param[i]);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">rows = ps.executeUpdate();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.commit();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.rollback(conn);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, null);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return rows;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Dao </span><span style="font-family:宋体;">层代码 接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface DepartmentsDao extends BaseDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Departments&gt; selectDeptByName(String<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void insertDept(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int updateDept(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int deleteDeptById(int departmentId);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Dao </span><span style="font-family:宋体;">层接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public class DepartmentsDaoImpl extends BaseDaoImpl implements<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentsDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Departments&gt; selectDeptByName(String deptName)<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ResultSet rs = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">List&lt;Departments&gt; list = new ArrayList&lt;&gt;();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement("select * from<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">departments where department_name = ?");<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setString(1, deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">rs = ps.executeQuery();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">while(rs.next()){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Departments d = new Departments();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setDepartmentId(rs.getInt("department_id"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setDepartmentName(rs.getString("department_name"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">d.setLocationId(rs.getInt("location_id"));<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">list.add(d);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.rollback(conn);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, null);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return list;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void insertDept(Departments dept) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.setAutoCommit(false);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement("insert into departments<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">values(default,?,?)");<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setString(1, dept.getDepartmentName());<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setInt(2, dept.getLocationId());<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.execute();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn.commit();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.rollback(conn);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, null);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">更新部门信息<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int updateDept(Departments dept) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">String sql = "update departments set department_name<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">= ? ,location_id = ? where department_id = ?";<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Object[] param = new<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Object[]{dept.getDepartmentName(),dept.getLocationId(),dept.ge<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">tDepartmentId()};<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return this.executeUpdate(sql, param);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">删除部门信息<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int deleteDeptById(int departmentId) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">String sql = "delete from departments where department_id<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">= ?";<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Object[] param = new Object[]{departmentId};<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return this.executeUpdate(sql, param);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><h1><span>211.</span>封装查询操作<span><o:p></o:p></span><span></span></h1><p class="MsoNormal">我封装的这个表<span>,</span>可以对数据库中任意一个表去做查询操作<span><o:p></o:p></span></p><p class="MsoNormal">同样其他地方相通<span>,</span>就这个地方并不一致<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="317" src="index_files/clip_image1017cb44a85-3330-4d2a-80c8-45c04fe6bfb1.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">所以查询难在要做一个通用的结果集<span><o:p></o:p></span></p><h2>定义抽象查询方法<span><o:p></o:p></span><span></span></h2><p class="MsoNormal">执行什么<span>sql</span>语句<span>,</span>绑定的参数<span>,</span>查询到的结果封装到哪个对象里<span>(</span>把类给我<span>,</span>然后再通过反射区建立对象<span>)<o:p></o:p></span></p><p class="MsoNormal">返回的是一个集合<span>,</span>类型是泛型<span>,T</span>代表一个占位<span>,</span>意思是你给我什么类型<span>,</span>我接收的就是什么类型占位的意思<span><o:p></o:p></span></p><p class="MsoNormal">之前加<span>&lt;T&gt;</span>表示当前方法是一个泛型方法<span><o:p></o:p></span></p><p class="MsoNormal">也可以在接口那里定义<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="491" height="64" src="index_files/clip_image102e541a33b-c71c-4d13-81c8-cde8ed38a3be.png"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="220" src="index_files/clip_image10492d3cd20-f476-4a57-b3da-254783afb9c4.jpg"></span><span><o:p></o:p></span></p><h2>实现<span><o:p></o:p></span><span></span></h2><h3>注意<span><o:p></o:p></span><span></span></h3><h4><span>ORM:<o:p></o:p></span><span></span></h4><p class="MsoNormal">把我们查到的结果集放到对象当中<span>,<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="127" src="index_files/clip_image10677ea866a-a831-45d4-84c1-aaf645be8000.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">这个操作 我们叫做<span>ORM<o:p></o:p></span></p><p class="MsoNormal"><span><img width="388" height="50" src="index_files/clip_image107141306a2-c1a1-451f-8007-faf445307664.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">对象关系映射<span>:</span>从关系数据库中把数据拿出来<span>,</span>放到对象当中<span><o:p></o:p></span></p><p class="MsoNormal">在关系型数据库中我们对<span>ORM</span>的处理完全依赖于手动去处理<span>,</span>后面我们学的<span>myd??</span>是一个自动的框架<span>,</span>对这样的行为我们再不用写了<span>,</span>完全由框架去帮我们去完成整个过程<span><o:p></o:p></span></p><h4>映射<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">问题是<span>,</span>我们怎么把某个列的值去放到对应的属性中呢<span>?<o:p></o:p></span></p><p class="MsoNormal">所以我们就有个前提要求<span>,</span>要保证我们表的字段名和我们对象的属性名保持一致<span>,</span>这样可以直接通过属性名去作为获取拿一个列的标识<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="26" src="index_files/clip_image1095097d19c-c049-4271-8433-be6d77b06231.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="430" height="178" src="index_files/clip_image1105df22a83-0f5e-4f0b-8b44-8be2fa2de7ea.png"></span><span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="186" src="index_files/clip_image1113aa8063f-f13a-429e-81cb-5b5baeaee387.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">接着设置<span>getset</span>方法<span><o:p></o:p></span></p><h4>套路<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">还是这个框架<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="275" src="index_files/clip_image1136ee32b48-b8cb-45ea-9070-657ef8f26bc6.jpg"></span><span><o:p></o:p></span></p><h4>绑定参数<span>,</span>设置<span>sql<o:p></o:p></span><span></span></h4><p class="MsoNormal">绑定参数的部分也可以直接从处理<span>dml</span>那里直接<span>copy</span>下来<span>,</span>都一样的<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="214" src="index_files/clip_image115a62efa89-e79c-4801-aba8-cbe1a9b051e5.jpg"></span><span><o:p></o:p></span></p><h4>处理结果集<span><o:p></o:p></span><span></span></h4><p class="MsoNormal">接下来返回一个结果集<span><o:p></o:p></span></p><p class="MsoNormal"><span>先通过<span>resultset</span>拿到结果集<span>,</span>然后<span>while,</span>以往我们<span>new</span>具体对象<span>,</span>赋值装进对应的对象就好了<span>,</span>但这里不行了<span><o:p></o:p></span></span></p><p class="MsoNormal"><span>通过反射用传进去的的类名<span>new</span>一个新的对象出来<span><o:p></o:p></span></span></p><p class="MsoNormal"><span><img width="554" height="31" src="index_files/clip_image117311b192d-7f3c-4d17-aace-7067bc2a44a3.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">如果这里不写<span>T,</span>它会用默认的<span>Object</span>类型<span>,</span>用泛型的方式去做<span>instance</span>的处理<span><o:p></o:p></span></p><h5>属性问题<span><o:p></o:p></span><span></span></h5><p class="MsoNormal">接下来我们需要考虑的就是返回的结果集具体有多少列<span>?</span>我们得循环把每一列都取出来放到我们的属性中<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="391" height="183" src="index_files/clip_image118eb5d0acc-baa6-4b06-816e-7dd45edd3c9b.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">所以我们就要知道具体有多少列<span>,</span>如此就要依赖于<span>resultset</span>方法了<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="53" src="index_files/clip_image120b2b1dd3d-c76f-458f-ac74-dc38260bbbe5.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">里面刚刚好有个返回列数的方法<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="433" height="49" src="index_files/clip_image121162fba12-84f0-4b17-980d-37791466187b.png"></span><span><o:p></o:p></span></p><p class="MsoNormal">列的个数就决定了我区分多少列<span><o:p></o:p></span></p><p class="MsoNormal">然后通过我拿到的名字<span>,</span>去设置我对应的子类的属性值<span>,<o:p></o:p></span></p><p class="MsoNormal">到此为止<span>,</span>处理结果集<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="323" src="index_files/clip_image123ae5e8f03-79c4-49f5-b3eb-0eeedcb706e9.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">除此之外<span>,</span>我们还可以使用<span>apache</span>的一个开源的处理工具<span>.<o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="146" src="index_files/clip_image125698d798d-2355-4b17-8e84-435664c6f0cd.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">它的作用就是向对象中的某个属性去放值这样的通用操作的<span><o:p></o:p></span></p><p class="MsoNormal">我们现在就不用用反射了<span><o:p></o:p></span></p><p class="MsoNormal">通过位置拿到列名<span>,</span>列名又和我们的属性相通<span>,</span>就可以通过<span>BeanUtil</span>放进去了<span><o:p></o:p></span></p><p class="MsoNormal">拿到列名之后就去哪这个列的值<span><o:p></o:p></span></p><p class="MsoNormal">接着就可以用<span>BeanUtil</span>的方法往类里面放值了<span>,</span>里面的三个参数分别是<span>:</span>往哪个对象里放<span>,</span>属性名叫什么<span>,</span>放的值是什么<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="237" src="index_files/clip_image127b1d00da3-cc0d-4ab0-ab59-c4fe1ead93e4.jpg"></span><b><span><o:p></o:p></span></b></p><p class="a">这个循环每执行一圈就一个一个地把列名依次放了进去<span><o:p></o:p></span></p><p class="a">接着别忘了把得到的值加入集合<span><o:p></o:p></span></p><p class="a"><span><img width="554" height="268" src="index_files/clip_image1299142abba-cb9d-4e32-953a-d9194bef2753.jpg"></span><span><o:p></o:p></span></p><p class="a">最后返回<span>List</span>就可以了<span><o:p></o:p></span></p><p class="a">如此我们就写好了一个通用的查询方法<span><o:p></o:p></span></p><h2>数据层使用<span><o:p></o:p></span><span></span></h2><h3>接口定义<span><o:p></o:p></span><span></span></h3><p class="MsoNormal"><span><img width="554" height="190" src="index_files/clip_image131600fa816-118b-4608-b98b-53a6bf9befda.jpg"></span><span><o:p></o:p></span></p><h3>具体实现<span><o:p></o:p></span><span></span></h3><p class="MsoNormal">通用只需要写语句和参数就可以了<span><o:p></o:p></span></p><p class="MsoNormal"><span><img width="554" height="108" src="index_files/clip_image1335712d672-d143-41ae-95c2-220fa6e7712d.jpg"></span><span><o:p></o:p></span></p><p class="MsoNormal">结果<span>:<o:p></o:p></span></p><p class="MsoNormal"><span><img width="458" height="229" src="index_files/clip_image134ee9141d5-7d0f-41b0-8864-5d9e2334a5eb.png"></span><span><o:p></o:p></span></p><h3>业务层<span><o:p></o:p></span><span></span></h3><h4>接口<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="312" src="index_files/clip_image1367ad50669-c2cd-4d03-9bc5-3aed0a98d192.jpg"></span><span><o:p></o:p></span></p><h4>接口实现类<span><o:p></o:p></span><span></span></h4><p class="MsoNormal"><span><img width="554" height="122" src="index_files/clip_image1384ae53a04-f7f7-42c6-b726-335a4e71b9fc.jpg"></span><span><o:p></o:p></span></p><h2>测试类<span><o:p></o:p></span><span></span></h2><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span><o:p>&nbsp;</o:p></span></p><p class="MsoNormal">通用只需要<span><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">3.2.1</span><span style="font-family:宋体;">代码<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">BaseDao </span><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface BaseDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int executeUpdate(String sql,Object[] param);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public &lt;T&gt; List&lt;T&gt; find(String sql,Object[]
param,Class&lt;T&gt;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">clazz);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">BaseDaoImpl </span><span style="font-family:宋体;">接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public &lt;T&gt; List&lt;T&gt; find(String sql, Object[] param,
Class&lt;T&gt;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">clazz) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Connection conn =null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">PreparedStatement ps =null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ResultSet rs = null;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">List&lt;T&gt; list = new ArrayList&lt;&gt;();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">conn = JdbcUtil.getConnection();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps = conn.prepareStatement(sql);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">得到参数的个数<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ParameterMetaData pmd = ps.getParameterMetaData();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">绑定参数<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">for(int i=0;i&lt;pmd.getParameterCount();i++){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ps.setObject(i+1, param[i]);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">处理结果集<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">rs = ps.executeQuery();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">获取结果集的信息<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">ResultSetMetaData rsmd = rs.getMetaData();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">while(rs.next()){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">完成<span> ORM </span>处理：通过<span> jdk </span>的反射<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">T bean =clazz.newInstance();//Departmens d = new<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Department();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">for(int i=0;i&lt;rsmd.getColumnCount();i++){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">得到列名<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">String columnName = rsmd.getColumnName(i+1);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">获取列的值<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Object value = rs.getObject(columnName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">//</span><span style="font-family:宋体;">通过<span> BeanUtil </span>工具类将值当如到对象中<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">BeanUtils.setProperty(bean, columnName,<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">value);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">list.add(bean);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}catch(Exception e){<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">e.printStackTrace();<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}finally{<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">JdbcUtil.closeResource(ps, conn, rs);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return list;<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentDao </span><span style="font-family:宋体;">接口<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public interface DepartmentsDao extends BaseDao {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Departments&gt; selectDeptByName(String<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public void insertDept(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int updateDept(Departments dept);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public int deleteDeptById(int departmentId);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Dept&gt; selectDeptByLikeName(String deptName);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">DepartmentDaoImpl </span><span style="font-family:宋体;">接口实现类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">@Override<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">public List&lt;Dept&gt; selectDeptByLikeName(String deptName) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">String sql ="select * from departments where<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">department_name like ?";<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">Object[] param = new Object[]{"%"+deptName+"%"};<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">return this.find(sql, param, Dept.class);<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><h1><span>212. JDBC</span>驱动加载原理 <span><o:p></o:p></span><span></span></h1><p class="MsoPlainText"><span style="font-family:宋体;">4 JDBC </span><span style="font-family:宋体;">驱动加载原理<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">4.1</span><span style="font-family:宋体;">创建对象的方式<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="196" src="index_files/clip_image140bcf50235-f0d1-44d6-be13-cf1558b10a88.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">4.2</span><span style="font-family:宋体;">创建对象时三个重要的步骤<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">?</span><span style="font-family:宋体;">通过类加载器加载<span> class:</span>我们的<span>class</span>在磁盘中放着<span>,</span>这个过程就是把它加到内存当中<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">?</span><span style="font-family:宋体;">初始化所有静态部分<span>:</span>包括类中的静态方法<span>,</span>静态变量<span>,</span>静态化初始块等等<span>,</span>即静态优先级是最高的<span>,</span>这也说明了<span>,</span>为什么静态方法中不能访问非静态的方法和变量<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">我们用反射去初始化一个对象的时候只执行了前两个部分<span>,</span>也就是说初始化了所有的静态部分<span>,</span>对象还没有具体的分配出来<span>,</span>说明时候<span>newinstance</span>了<span>,</span>什么时候再去做第三步<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;"><o:p>&nbsp;</o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">我们连接的时候为什么要写<span>class.forname</span>呢<span>?<o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">这是我们实例化数据库驱动的一个方式<span>,</span>因为只有把它实例化出来了<span>,</span>我们才能通过这个对象来创建链接<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">实例化出来之后<span>,</span>通过<span>drivermanager</span>来创建链接<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="23" src="index_files/clip_image1427a12512b-9068-4ced-bbdc-b4184ebe0442.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><h3>源码<span><o:p></o:p></span><span></span></h3><p class="MsoPlainText"><span style="font-family:宋体;">Driver</span><span style="font-family:宋体;">这个类是数据库<span>,</span>也就是<span>mysql</span>提供的<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="179" src="index_files/clip_image14405894056-61f0-428c-af0d-05a95f2aef2a.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">它实现了<span>driver</span>的一个接口<span>,</span>这个接口中又个<span>connect</span>的方法<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="157" src="index_files/clip_image1465173eee2-476a-401d-80da-fd34bca7c33d.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">这个方法是让不同数据库厂商去实现的<span>,</span>具体怎么去链接让定义在<span>connect</span>里面<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接下来看<span>NonRegisteringDriver</span>类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">如是找到了<span>connect</span>类<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="422" height="287" src="index_files/clip_image1483e1682ac-8e9f-47b1-8d27-b3443b3b1e80.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">这部分代码就是与自己数据库建立
链接的一个方法<span>,</span>然后最后返回一个<span>connection,</span>也就是每次我们去获取连接时候都会去调用这个方法<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">但是我们调用的不是这个方法啊<span>?<o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="20" src="index_files/clip_image150211583a3-cdae-4643-b7c8-256eb1a5af3f.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">在<span>driver</span>类里有个<span>static</span>块<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span><img width="554" height="337" src="index_files/clip_image1529a935401-e837-4925-ae1d-2122a7aa320c.jpg"></span><span style="font-family:宋体;"><o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">也就是说我们<span>forname</span>的时候就会执行这段静态代码块<span>,</span>把自己给实例化出来了<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">也就是说它通过静态化初始块<span>,</span>把自己<span>new</span>了出来<span>,</span>然后调用<span>drivermanager</span>的<span>registerDriver,</span>把自己交给了 <span>drivermanager<o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">接下来我们调用<span>drivermanager</span>的<span>getconnection</span>去调用父类的<span>connect</span>方法获取到一个链接<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">?</span><span style="font-family:宋体;">为新生对象分配内存<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">4.3MySQL </span><span style="font-family:宋体;">驱动类的实例化过程<span><o:p></o:p></span></span></p><p class="MsoPlainText"><span style="font-family:宋体;">static {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">try {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">java.sql.DriverManager.registerDriver(new Driver());<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">} catch (SQLException E) {<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">throw new RuntimeException("Can't register driver!");<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="MsoPlainText"><span style="font-family:宋体;">}<o:p></o:p></span></p><p class="a"><span><o:p>&nbsp;</o:p></span></p></body></html>